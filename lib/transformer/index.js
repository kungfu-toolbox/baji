var transformer = module.exports;

/* Transformer should transform the origin ast to the preferred ast in
 * which the callback hell problem shall be solved.
 * @param ast: Abstract syntax tree generated by the generator.
 */
transformer.transform = function(ast) {
    transform(ast);
    return ast;
};

var transform = function(node, context) {
    switch(node.type) {
        case "Program":
            return Program(node, context);
        case "BlockStatement":
            return Program(node, context);
        case "ExpressionStatement":
            return ExpressionStatement(node, context);
        case "CallExpression":
            return CallExpression(node, context);
        case "FunctionDeclaration":
            return FunctionDeclaration(node, context);
        case "IfStatement":
            return IfStatement(node, context);
        default:
            return context;
    }
};

var Program = function(node) {
    var transformedBody = [];
    var context = transformedBody;
    for (var i = 0; i < node.body.length; i++) {
        context = transform(node.body[i], context);
    }
    node.body = transformedBody;
    return node;
};

var ExpressionStatement = function(node, context) {
    var newContext = transform(node.expression, context);
    context.push(node);
    return newContext;
};

var CallExpression = function(node, context) {
    var newContext = null;
    if (node.callee.name === "kf") {
        var callbackArgs = node.arguments;
        node.type = "FunctionExpression";
        node.body = {
                    type: "BlockStatement",
                    body: []
                };
        node.params = callbackArgs;
        newContext = node.body.body;
        return newContext;
    }
    for (var i = 0; i < node.arguments.length; i++) {
        context = transform(node.arguments[i], context);
    }
    return context;
};

var FunctionDeclaration = function(node, context) {
    var newContext = transform(node.body, context);
    context.push(node);
    return newContext;
};

var IfStatement = function(node, context) {
    context.push(node);
    return context;
};
